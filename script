#!/usr/bin/env ruby

require 'colorize'

SKEY = %w(-u SKEY)
POST = %w(-X POST)
CONFIG = "/usr/local/etc/clisim/config"

OPTIONS = {
  "ltran" => ["transfers", SKEY],
  "ctran" => ["transfers", SKEY + POST + %w(-d "amount=300")]
}

def transfer(url, options=[])
  curl "transfers", options, url
end

def to_map(array, map={})
  array.each {|x, y| map[x] = y.chomp }
  map
end

def readConfig(config)
  to_map File.open(config, "r").map { |line| line.split("=") }
end

def replace(value, config)
  config.has_key?(value) ? value.gsub(value, config[value]) : value
end

def curl(opt, url, config)
  system disp "curl "+ opt[1].inject("#{url}/#{opt[0]} ") {|k, v| "#{k}#{replace(v, config)} " }
end

def disp(command)
  puts command.to_s.green
  command
end

def showError(edit_result)
  if edit_result == 1 
    puts "\nYou need argument.\n".red
    puts "[options]"
    OPTIONS.merge("edit" => "").each {|option| puts "- #{option[0]}"}
  end
end

def apply(condition, trueFunc, trueValues, falseFunc, falseValues)
   condition ? trueFunc.call(*trueValues) : falseFunc.call(*falseValues)
end

def quit(function_call)
  abort
end

def edit()
  if (ARGV[0] == "edit") 
    system("vim /usr/local/etc/clisim/config") 
    return 0
  end
  return 1
end

config = readConfig CONFIG

apply(OPTIONS.keys.include?(ARGV[0]), 
  lambda = -> (x, y, c) { curl(x, y, c) }, [OPTIONS[ARGV[0]], config["ROOT_URL"], config],
  lambda = -> () {showError(edit)}, [])


